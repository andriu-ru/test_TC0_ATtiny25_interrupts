
test_TC0_ATtiny25_interruts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000002e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000816  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004d9  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000026e  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016a  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d8  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000002  000000cc  000000cc  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.TC0_setup 00000032  0000009a  0000009a  000000ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000006c  0000002e  0000002e  00000082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	64 c0       	rjmp	.+200    	; 0xcc <__bad_interrupt>
   4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
   6:	62 c0       	rjmp	.+196    	; 0xcc <__bad_interrupt>
   8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
   a:	60 c0       	rjmp	.+192    	; 0xcc <__bad_interrupt>
   c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
   e:	5e c0       	rjmp	.+188    	; 0xcc <__bad_interrupt>
  10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
  12:	5c c0       	rjmp	.+184    	; 0xcc <__bad_interrupt>
  14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
  16:	5a c0       	rjmp	.+180    	; 0xcc <__bad_interrupt>
  18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
  1a:	58 c0       	rjmp	.+176    	; 0xcc <__bad_interrupt>
  1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61
  26:	03 d0       	rcall	.+6      	; 0x2e <_etext>
  28:	00 c0       	rjmp	.+0      	; 0x2a <_exit>

0000002a <_exit>:
  2a:	f8 94       	cli

0000002c <__stop_program>:
  2c:	ff cf       	rjmp	.-2      	; 0x2c <__stop_program>

Disassembly of section .text:

000000cc <__bad_interrupt>:
  cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

Disassembly of section .text.TC0_setup:

0000009a <TC0_setup>:
}


	void TC0_setup (void) //Функция настройки таймера счетчика
	{
		TCCR0A |= (1<<WGM01); //Режим работы таймера счетчика. Сейчас прерывание по сравнению, СТС.
  9a:	8a b5       	in	r24, 0x2a	; 42
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8a bd       	out	0x2a, r24	; 42
		TCCR0A |= (1<<COM0A0); //При активации данного бита порт PB0 меняет своё состояние при совпадении таймера / счетчика с регистром OCR0A
  a0:	8a b5       	in	r24, 0x2a	; 42
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8a bd       	out	0x2a, r24	; 42
		TCCR0B |= (1<<CS02)|(1<<CS00); //Предделитель таймра счетчика
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	83 bf       	out	0x33, r24	; 51
		TCCR0B &= ~(1<<CS01); //Предделитель таймра счетчика
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	83 bf       	out	0x33, r24	; 51
		OCR0A = 0xFF; //Число для сравнения 255
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	89 bd       	out	0x29, r24	; 41
//		OCR0A = 0x80; //Число для сравнения 128	
		TIMSK |= 1<<OCIE0A; //Разрешение прерывания по совпадению. вектор COMPA
  b6:	89 b7       	in	r24, 0x39	; 57
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	89 bf       	out	0x39, r24	; 57
		
		GTCCR |= (1<<TSM)|(1<<PSR0); //Остановка работы предделителя. Таймер счетчик не работает.
  bc:	8c b5       	in	r24, 0x2c	; 44
  be:	81 68       	ori	r24, 0x81	; 129
  c0:	8c bd       	out	0x2c, r24	; 44
		TCNT0 = 0; //Запись в регистр таймера счетчика 0. Сброс на начало счета.
  c2:	12 be       	out	0x32, r1	; 50
		GTCCR &= ~((1<<TSM) | (1<<PSR0)); //запуск работы предделитля таймера счетчика. Таймер счетчик в работе.	
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	8e 77       	andi	r24, 0x7E	; 126
  c8:	8c bd       	out	0x2c, r24	; 44
  ca:	08 95       	ret

Disassembly of section .text.main:

0000002e <main>:
// 	PORTB ^= 1<<PB0;
// }

int main(void)
{
	DDRB = 0b11111;
  2e:	8f e1       	ldi	r24, 0x1F	; 31
  30:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000;
  32:	18 ba       	out	0x18, r1	; 24
	
	TC0_setup();
  34:	32 d0       	rcall	.+100    	; 0x9a <TC0_setup>

	asm("sei"); //Разрешение глобального прерывания. 
  36:	78 94       	sei
    while(1)
    {
//         PORTB ^= 1<<PB0;
 		
			
			PORTB &= ~(1<<PB1);
  38:	88 b3       	in	r24, 0x18	; 24
  3a:	8d 7f       	andi	r24, 0xFD	; 253
  3c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3e:	2f e3       	ldi	r18, 0x3F	; 63
  40:	8d e0       	ldi	r24, 0x0D	; 13
  42:	93 e0       	ldi	r25, 0x03	; 3
  44:	21 50       	subi	r18, 0x01	; 1
  46:	80 40       	sbci	r24, 0x00	; 0
  48:	90 40       	sbci	r25, 0x00	; 0
  4a:	e1 f7       	brne	.-8      	; 0x44 <__SREG__+0x5>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <__SREG__+0xf>
  4e:	00 00       	nop
			_delay_ms(1000);
			PORTB |= 1<<PB1;
  50:	88 b3       	in	r24, 0x18	; 24
  52:	82 60       	ori	r24, 0x02	; 2
  54:	88 bb       	out	0x18, r24	; 24
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	8d e0       	ldi	r24, 0x0D	; 13
  5a:	93 e0       	ldi	r25, 0x03	; 3
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	80 40       	sbci	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <__SREG__+0x1d>
  64:	00 c0       	rjmp	.+0      	; 0x66 <__SREG__+0x27>
  66:	00 00       	nop
			_delay_ms(1000);
			
			PORTB |= 1<<PB3;
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	88 60       	ori	r24, 0x08	; 8
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	2f e3       	ldi	r18, 0x3F	; 63
  70:	8d e0       	ldi	r24, 0x0D	; 13
  72:	93 e0       	ldi	r25, 0x03	; 3
  74:	21 50       	subi	r18, 0x01	; 1
  76:	80 40       	sbci	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <__SREG__+0x35>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <__SREG__+0x3f>
  7e:	00 00       	nop
			_delay_ms(1000);
			PORTB &= ~(1<<PB3);
  80:	88 b3       	in	r24, 0x18	; 24
  82:	87 7f       	andi	r24, 0xF7	; 247
  84:	88 bb       	out	0x18, r24	; 24
  86:	2f e3       	ldi	r18, 0x3F	; 63
  88:	8d e0       	ldi	r24, 0x0D	; 13
  8a:	93 e0       	ldi	r25, 0x03	; 3
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <__DATA_REGION_LENGTH__+0x16>
  96:	00 00       	nop
  98:	cf cf       	rjmp	.-98     	; 0x38 <main+0xa>
